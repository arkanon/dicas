#!/bin/bash

# Arkanon <arkanon@lsd.org.br>
# 2015/09/13 (Dom) 02:33:40 BRT
# 2015/07/06 (Seg) 08:44:29 BRS
# 2015/07/05 (Dom) 22:09:50 BRS
# 2015/07/04 (Sáb) 01:58:57 BRS
# 2015/07/03 (Sex) 11:12:18 BRS
# 2015/07/03 (Sex) 02:25:59 BRS
# 2015/07/02 (Qui) 10:13:25 BRT
# 2015/06/30 (Ter) 00:37:51 BRS
# 2015/06/10 (Qua) 09:32:39 BRT
#
# <http://codexico.com.br/blog/linux/tutorial-simples-como-usar-o-git-e-o-github>
# Markdown, para criaçao do README.md <http://daringfireball.net/projects/markdown>

  git --help

  # ao adicionar, renomear, mover ou remover arquivos, diretórios ou links simbólicos, usar
  # git <add, mv ou rm>, para que essas modificações fiquem no histórico.



# ÍNDICE
#
#  _00_  chave SSH
#  _01_  token de autenticaçao OAuth v2
#  _02_  configuração local do git
#  _03_  baixar cópia pela primeira vez
#  _04_  criar repositório no github
#  _05_  transformar um subdiretório de um repositório em um novo repositório
#  _06_  ignorar elementos na sincronização
#  _07_  comparar cópia local com a do servidor
#  _08_  sincronizar o repositório local desatualizado em relação ao >>remoto mais atualizado<<
#  _09_  acrescentar diretórios vazios à extrutura do git
#  _10_  sincronizar o repositório remoto desatualizado em relação ao >>local mais atualizado<<
#  _11_  renomear o repositório
#  _12_  acrescentar ou alterar atributos de um repositório
#  _13_  deixar um diretório acessível automaticamente pelo site



    user=arkanon
    name=Arkanon
  domain=lsd.org.br



#  _00_  chave SSH

     # chave sem passphrase para interação com o servidor sem necessidade de entrada de senha em cada ação
     echo y | ssh-keygen -t dsa -f ~/.ssh/i-git -C $user@github.com -N ''
     echo "IdentityFile ~/.ssh/i-git" >> ~/.ssh/config
     sudo apt-get install git xclip
     cat ~/.ssh/i-git.pub | xclip -sel clip # copia chave pública para área de transferência
     # colar em <https://github.com/settings/ssh> com título idêntico ao comentário da chave SSH
     ssh git@github.com # testa

     # chave com passphrase mas sem entrada manual em cada operação com agente ssh
     # <https://developer.github.com/guides/using-ssh-agent-forwarding/>



#  _01_  token de autenticaçao OAuth v2

     # <https://developer.github.com/v3/auth/#basic-authentication>
     # <https://github.com/settings/tokens/new>
     # vi ~/.gittoken
     # chmod 600 ~/.gittoken
     token=$(cat ~/.gittoken)



#  _02_  configuração local do git

     git config --global user.name    $name
     git config --global user.email   $user@$domain
     git config --global push.default simple # remove mensagens de mudança de funcionamento em cada push
     git config --global core.editor  vim
     git config --global merge.tool   vimdiff
     git config --list



     mkdir -p /fs/src/git
     cd       /fs/src/git



#  _03_  baixar cópia pela primeira vez

     git clone ssh://git@github.com/arkanon/svl.git .



#  _04_  criar repositório no github

     # <https://developer.github.com/v3/repos/#create>
     repo="fn"
     desc="Função Exponencial Múltipla de Ordem n"
      url="https://api.github.com/user/repos"
     data="{ \"name\":\"$repo\" , \"description\":\"$desc\" }"

     mkdir -p $repo
     cd $repo
     echo "# $repo" >| README.md

     # a curl tutorial using GitHub's API <https://gist.github.com/caspyin/2288960>
   # curl -u "$user"         $url -d "$data" # entrada interativa da senha
   # curl -u "$user:$passwd" $url -d "$data" # citação da senha no comando
     curl -u "$user:$token"  $url -d "$data" # usando token de autenticaçao

     git init
     git add .
     git commit -m "Submissão inicial"
     git remote add origin ssh://git@github.com/$user/$repo.git
time git push -u origin master

     # se pedir senha apesar da chave sem passphrase
     # cat .git/config
     #     usar
     #       url = ssh://git@github.com/<USER>/<REPO>.git
     #     e não
     #       url = https://github.com/username/repo.git
     #       url = git://github.com/username/repo.git



#  _05_  transformar um subdiretório de um repositório em um novo repositório

     # <https://help.github.com/articles/splitting-a-subfolder-out-into-a-new-repository/>

     # 1. Change the current working directory to the location where you want the new backup clone to be made.

          orirepo=svl
          newrepo=dipohlo

          mkdir $newrepo
          cd    $newrepo

     # 2. Replicate the repository that contains the subfolder.

          git clone ssh://git@github.com/$user/$orirepo .
     #    or
          cp -a ../$orirepo/{,.[^.]}* .

     # 3. Run git filter-branch with the name of the folder you want to turn into a separate repository.

          git filter-branch --prune-empty --subdirectory-filter $newrepo
          # Rewrite b42eb2ee5d3ec8698a79c14c2f9e2d83fee24776 (20/20)
          # Ref 'refs/heads/gh-pages' was rewritten

     # 4. Criar o novo repositório no github
           repo="dipohlo"
           desc="DiPoHLo - Distribuição Portável do HotLogo"
            url="https://api.github.com/user/repos"
           data="{ \"name\":\"$repo\" , \"description\":\"$desc\" }"
          token=$(cat ~/.gittoken)
          curl -u "$user:$token"  $url -d "$data"

     # 5. Renomear o repositório local para ser enviado para o novo criado no github
          git remote rm      origin
          git remote add     origin ssh://git@github.com/$user/$newrepo.git
          git remote set-url origin ssh://git@github.com/$user/$newrepo.git

     # 6. The repository now contains all the files that were in your subfolder.
     #    Note that although all of your previous files have been removed, they still exist within the Git history.
     #    You can now push your new local repository to a new repository on GitHub.

          git push --set-upstream origin gh-pages



#  _06_  ignorar elementos na sincronização

     cat .gitignore

         # java class files
         *.class

         # binary/compiled files
         *.[oa]

         # temporary files
         *~

         # vim swap files
         .*.swp

     # some .gitignore pattern/naming rules:
     #   - blank lines are ignored
     #   - lines beginning with '#' are ignored
     #   - standard glob patterns work (.a, .o)
     #   - can specify root directory files like '/TODO'
     #   - end patterns with a slash to specify a directory (bin/)
     #   - negate a pattern by beginning it with an '!'



#  _07_  comparar cópia local com a do servidor

     git status
     git diff
     git diff --cached



#  _08_  sincronizar o repositório local desatualizado em relação ao >>remoto mais atualizado<<

     git pull

     # caso mensagem "You have not concluded your merge (MERGE_HEAD exists)"
     git commit
     # ou
     git merge --abort


#  _09_  acrescentar diretórios vazios à extrutura do git

     # <http://stackoverflow.com/a/8944077>
     #
     # 1. Suppose you are in your repository.
     #
     # 2. Create your empty directory:
     #
     #    $ mkdir path/to/empty-folder
     #
     # 3. Add it to the index using a plumbing command and the empty tree SHA-1:
     #
     #    $ git update-index --index-info
     #    040000 tree 4b825dc642cb6eb9a060e54bf8d69288fbee4904    path/to/empty-folder
     #
     #    Type the command and then enter the second line. Press Enter and then Ctrl + D to terminate your input. Note: the format is mode [SPACE] type [SPACE] SHA-1hash [TAB] path (the tab is important, the answer formatting does not preserve it).
     #
     # 4. That's it! Your empty folder is in your index. All you have to do is commit.



#  _10_  sincronizar o repositório remoto desatualizado em relação ao >>local mais atualizado<<

     # todo o repositório
     git add .
     git commit -m "Modificações realizadas"

     # apenas modificações pontuais
     git add make
     git rm make-p1
     git rm make-p2
     git commit -m "make-p1 e make-p2 fundidos em make" make
   # git checkout

     git push



#  _11_  renomear o repositório

      old="dicas"
      new="doc"
      url="https://api.github.com/repos/$user/$old"
     data="{ \"name\":\"$new\" }"
     git remote rm           origin
     git remote add          origin ssh://git@github.com/$user/$new.git
     git remote set-url      origin ssh://git@github.com/$user/$new.git
     curl -u "$user:$token" $url -d "$data" -X PATCH # <https://developer.github.com/v3/#http-verbs>
     git push --set-upstream origin master
     ( cd ..; mv $old $new )
     cat .git/config



#  _12_  acrescentar ou alterar atributos de um repositório

     repo="doc"
     desc="Documentação, textos e dicas sobre os vários assuntos, não necessariamente apenas de TI".
      url="https://api.github.com/repos/$user/$repo"
     data="{ \"name\":\"$repo\" , \"description\":\"$desc\" }"
     curl -u "$user:$token" $url -d "$data" -X PATCH
   # cat .git/description # aparentemente não é usado



#  _13_  deixar um diretório acessível automaticamente pelo site



# EOF
